#!/bin/bash
set -euo pipefail

. ${PUTIT_CLI_INSTALL_DIR}/includes/validations/input_validations.sh
. ${PUTIT_CLI_INSTALL_DIR}/includes/common-functions.sh

# shift application args: putit application 
shift 1

get_help() {
  generate_usage
}

list_deploy_users() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local response_file="$(create_tmpfile)"
  local request_url="${PUTIT_URL}/depuser"
  local request_cmd="${PUTIT_CURL} ${response_file} ${request_url// /%20}"
  
  send_request "${request_cmd}" "${response_file}"
  if is_empty_response "${response_file}" ; then
    log "INFO" "There ar no  steps for application: ${putit_application_name}"
  else
    display
  fi
}

list_sshkeys() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local response_file="$(create_tmpfile)"
  local request_url="${PUTIT_URL}/sshkey"
  local request_cmd="${PUTIT_CURL} ${response_file} ${request_url// /%20}"
  
  send_request "${request_cmd}" "${response_file}"
  if is_empty_response "${response_file}" ; then
    log "INFO" "There ar no pairs of ssk keys"
  else
    display 
  fi
}

list_credential() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local response_file="$(create_tmpfile)"
  local request_url="${PUTIT_URL}/credential"
  local request_cmd="${PUTIT_CURL} ${response_file} ${request_url// /%20}"
  
  send_request "${request_cmd}" "${response_file}"
  if is_empty_response "${response_file}" ; then
    log "INFO" "There are no credentials."
  else
    display
  fi
}

generate_sshkey() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local regex="${putit_sshkey_bits_regex}"
  validate ${putit_sshkey_bits}
  local regex="${putit_sshkey_type_regex}"
  validate ${putit_sshkey_type}
  local regex="${putit_sshkey_name_regex}"
  validate ${putit_sshkey_name}

  #local response_file="$(create_tmpfile)"

  # if response_file exist means it comes from create function, if not create it
  #if [ -z ${response_file+x} ]; then 
    local response_file="$(create_tmpfile)"
  #fi
  local payload_file="$(create_tmpfile)"

  if  [ ! -z ${putit_sshkey_passphrase+x} ]; then 
    read_password
    jo type="${putit_sshkey_type}" name="${putit_sshkey_name}" comment="${putit_sshkey_comment}" bits="$putit_sshkey_bits" passphrase="${user_password}" > ${payload_file}
  else
    jo type="${putit_sshkey_type}" name="${putit_sshkey_name}" comment="${putit_sshkey_comment}" bits="${putit_sshkey_bits}" > ${payload_file}
  fi
  
  local request_url="${PUTIT_URL}/sshkey"
  local request_cmd="${PUTIT_CURL} ${response_file} --data @$payload_file -X POST ${request_url// /%20}"

  send_request "${request_cmd}" "${response_file}"
  log "INFO" "SSHkey pair was generated with name: ${putit_sshkey_name}."
}

create_deploy_user() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local regex="${putit_deployuser_username_regex}"
  validate ${putit_deployuser_username} 

  # if response_file exist means it comes from create function, if not create it
  if [ -z ${response_file+x} ]; then 
    local response_file="$(create_tmpfile)"
  fi

  local payload_file="$(create_tmpfile)"
  jo username="${putit_deployuser_username}" > $payload_file
  log "DEBUG" "Payload created: ${payload_file}"
  local request_url="${PUTIT_URL}/depuser"
  local request_cmd="${PUTIT_CURL} ${response_file} --data @$payload_file -X POST ${request_url// /%20}"

  send_request "${request_cmd}" "${response_file}"
  log "INFO" "Created deploy user: ${putit_deployuser_username}."
}

create() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"

  local regex="${putit_credential_name_regex}"
  validate ${putit_credential_name} 

  # in this action, values comes from response files, not from validation functions. 
  # also some response files need to be accessible by main (create) function and sub-functions 

  # generate pair of SSH keys 
  #local response_file="$(create_tmpfile)"
  generate_sshkey

  # save public key to disk
  save_ssh_public_key
 
  # create deploy user 
  local response_file="$(create_tmpfile)"
  create_deploy_user
#  local putit_deployuser_usernama=$(jq '.username' ${response_file})
#  local putit_deployuser_username=${putit_deployuser_username//\"} 
  
  # create putit credential: deployer user + SSH keys
  local response_file="$(create_tmpfile)"
  add_sshkey_to_user
}

add_sshkey_to_user() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  # by default values comes from validation functions
  # if invoked from create function values comes from response files
  
  local regex="${putit_sshkey_name_regex}"
  validate ${putit_sshkey_name}
  local regex="${putit_deployuser_username_regex}"
  validate ${putit_deployuser_username} 
 
  # if response_file exist means it comes from create function, if not create it
  if [ -z ${response_file+x} ]; then 
    local response_file="$(create_tmpfile)"
  fi
  local payload_file="$(create_tmpfile)"

  jo key_name="${putit_sshkey_name}" name="${putit_deployuser_username}" > ${payload_file}
  local request_url="${PUTIT_URL}/depuser/${putit_deployuser_username}/sshkeys"
  local request_cmd="${PUTIT_CURL} ${response_file} --data @$payload_file -X POST ${request_url// /%20}"
  send_request "${request_cmd}" "${response_file}"
  log "INFO" "Created credential with name: ${putit_deployuser_username} combined from pair of pub and prv ssh keys with name: ${putit_sshkey_name} and an deploy user: ${putit_deployuser_username}."
}

save_ssh_public_key() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local regex="${putit_sshkey_name_regex}"
  validate ${putit_sshkey_name}
  
  if [ ! -z ${putit_sshkey_public_save+x} ]; then 
    mkdir -p $(dirname ${putit_sshkey_public_save}) || log "ERORR" "Can't create dir where ssh pub key should be saved."
    public_key_file=${putit_sshkey_public_save}
  else
    # check maybe it should be local    
    public_key_file="$(create_tmpfile)" 
  fi
  
  local response_file="$(create_tmpfile)"
  local request_url="${PUTIT_URL}/sshkey/${putit_sshkey_name}/ssh_public_key"
  local request_cmd="${PUTIT_CURL} ${response_file} ${request_url// /%20}"

  send_request "${request_cmd}" "${response_file}"
  cat ${response_file} > ${public_key_file} || log "ERROR" "Unable to extract ssh pub key for key_name: ${putit_sshkey_name}" 
  log "INFO" "Public key for ssh key pair: ${putit_sshkey_name} has been exported to: ${public_key_file}"
}

manage_credentials() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local regex="${putit_credential_name_regex}"
  validate ${putit_credential_name}
  local regex="${env_name_regex}"
  validate ${putit_environment_name}
  local regex="${app_name_regex}"
  validate ${putit_application_name}

  if [ "$1" == 'assign' ]; then 
    http_method='PUT'
  elif [ "$1" == 'unassign' ]; then 
    http_method='DELETE'
  fi

  local response_file="$(create_tmpfile)"

  # means we will assign credential to the host under some env 
  if [ ! -z ${putit_application_name+x} ] && [ ! -z ${putit_host_fqdn+x} ]; then   
    local regex="${putit_fqdn_regex}"
    validate ${putit_host_fqdn}
    local request_url="${PUTIT_URL}/application/${putit_application_name}/envs/${putit_environment_name}/hosts/${putit_host_fqdn}/credential/${putit_credential_name}"
    local request_cmd="${PUTIT_CURL} ${response_file} -X ${http_method} ${request_url// /%20}"

    send_request "${request_cmd}" "${response_file}"
    if [ "$1" == 'assign' ]; then
      log "INFO" "Assigned credential with name: ${putit_credential_name} to host: ${putit_host_fqdn} under environment: ${putit_environment_name} for application: ${putit_application_name}."
    elif [ "$1" == 'unassign' ]; then
      log "INFO" "Unassgined credential with name: ${putit_credential_name} from host: ${putit_host_fqdn} under environment: ${putit_environment_name} for application: ${putit_application_name}."
    fi
  # assign credential to enitre env 
  elif [ ! -z ${putit_application_name+x} ] && [ -z ${putit_host_fqdn+x} ]; then
    local request_url="${PUTIT_URL}/application/${putit_application_name}/envs/${putit_environment_name}/credential/${putit_credential_name}"
    local request_cmd="${PUTIT_CURL} ${response_file} -X ${http_method} ${request_url// /%20}"

    send_request "${request_cmd}" "${response_file}"
    if [ "$1" == 'assign' ]; then
      log "INFO" "Assigned credential with name: ${putit_credential_name} to under environment: ${putit_environment_name} for application: ${putit_application_name}."
    elif [ "$1" == 'unassign' ]; then
      log "INFO" "Unssigned credential with name: ${putit_credential_name} from environment: ${putit_environment_name} for application: ${putit_application_name}."
    fi 
  fi
}

get_ssh_public_key() {
  log "DEBUG" "Inside ${FUNCNAME[0]}"
  local regex="${putit_credential_name_regex}"
  validate ${putit_credential_name}

  local response_file="$(create_tmpfile)"
  
  local request_url="${PUTIT_URL}/credential/${putit_credential_name}/ssh_public_key"
  local request_cmd="${PUTIT_CURL} ${response_file}  ${request_url// /%20}"

  send_request "${request_cmd}" "${response_file}"
  cat ${response_file} || log "ERROR" "Unable to extract ssh pub key for key_name: ${putit_sshkey_name}"
}

if [[ $# -eq 0 ]]; then 
  get_help && exit 64
fi

case "$1" in
  list) # list deploy users
    include_custom_functions $1
    shift 1
    parse_args "$@"
    list_credential
    ;; 
  list-deploy-users) # list deploy users
    include_custom_functions $1
    shift 1
    parse_args "$@"
    list_deploy_users 
    ;; 
  list-sshkeys) # list ssh keys
    include_custom_functions $1
    shift 1
    parse_args "$@"
    list_sshkeys
    ;; 
  get-ssh-public-key) # list ssh keys
    include_custom_functions $1
    shift 1
    parse_args "$@"
    get_ssh_public_key
    ;; 
  generate-sshkey) # generate new ssh_key 
    include_custom_functions $1
    shift 1
    parse_args "$@"
    generate_sshkey 
    ;; 
  create-deploy-user) # create new deploy user 
    include_custom_functions $1
    shift 1
    parse_args "$@"
    create_deploy_user
    ;;
  create) # create user, generate key and assign key to the new user 
    include_custom_functions $1
    shift 1
    parse_args "$@"
    create
    ;;
  add-sshkey-to-user) # add sshkey to the user
    include_custom_functions $1
    shift 1
    parse_args "$@"
    add_sshkey_to_user
    ;;
  assign) # add cred to the host or env
    include_custom_functions $1
    shift 1
    parse_args "$@"
    manage_credentials 'assign'
    ;;
  unassign) # remove cred from the host or env
    include_custom_functions $1
    shift 1
    parse_args "$@"
    manage_credentials 'unassign'
    ;;
  *)
    log "INFO" "$1: Didn't match anything"
    get_help
    exit 64
    ;;
esac
